{"version":3,"sources":["contexts/GlobalState.js","contexts/BlocktreeProvider.js","components/AllRequests.tsx","components/MyRequests.tsx","components/MyApprovedRequests.tsx","components/RequestsForApproval.tsx","services/DamlJsonApi.js","components/LoginScreen.tsx","components/UserWidget.tsx","components/Maps.tsx","components/CreateRequest.tsx","components/RequestsGraph.tsx","components/Members.tsx","components/CreateMember.tsx","index.tsx","components/Parteis.tsx"],"names":["globalState","setGlobalState","AddComponent","ws1","ws2","ws","GlobalStateContext","createContext","GlobalStateProvider","props","useState","store","Provider","value","children","useGlobalState","type","data","useContext","undefined","BlocktreeProvider","components","setComponents","el","component","settings","ReactDOM","createPortal","React","createElement","DamlJsonApi","baseUrl","window","location","host","url","URL","toString","baseUrlParam","searchParams","get","this","token","sessionStorage","getItem","party","ledgerId","a","alert","payload","encode","setItem","removeItem","path","body","fetch","method","headers","JSON","stringify","then","res","json","status","errors","catch","error","console","log","parteis","result","identifierHint","displayName","post","templateId","contractId","choice","argument","templateIds","query","readers","protocol","WebSocket","addEventListener","send","event","list","isUpdate","parse","events","forEach","item","archived","index","findIndex","i","splice","created","push","$instance","LoginScreen","onLogin","setParty","simpleLogin","preventDefault","createCredentials","Grid","className","textAlign","style","height","verticalAlign","Column","maxWidth","Header","as","size","color","Content","Form","Segment","Input","fluid","icon","iconPosition","placeholder","onChange","e","currentTarget","Button","primary","onClick","disabled","UserWidget","setUser","showLogin","setShowLogin","Menu","borderless","position","Item","split","active","logout","title","CustomMarker","infoVisible","setInfoVisible","visible","onMouseOver","onMouseOut","lat","lng","UncomposedPinsMap","withScriptjs","withGoogleMap","defaultZoom","defaultCenter","PinMap","googleMapURL","loadingElement","containerElement","mapElement","UncomposedChooseMap","center","setCenter","zoom","setZoom","markerPosition","setMarkerPosition","markerVisible","setMarkerVisible","onRightClick","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","latLng","onSubmit","ChooseMap","observers","CreateRequest","flight","setFlight","isSubmitting","setIsSubmitting","showMap","setShowMap","submit","getParteis","allParteis","parties","filter","includes","map","identifier","create","user","approvers","disapprovers","Icon","name","Divider","basic","labelPosition","width","label","step","min","altitude","timeStart","timeEnd","loading","content","AllRequests","itemsDiplays","items","setItems","sort","b","Date","time","getTime","useEffect","querySocket","messageHandler","close","List","relaxed","key","length","Label","ribbon","MyRequests","reverse","join","MyApprovedRequests","toLocaleString","RequestsForApproval","exercise","approver","disapprover","parseFloat","positive","approveRequest","secondary","disapproveRequest","Chart","register","ArcElement","LineElement","BarElement","PointElement","BarController","BubbleController","DoughnutController","LineController","PieController","PolarAreaController","RadarController","ScatterController","CategoryScale","LinearScale","LogarithmicScale","RadialLinearScale","TimeScale","TimeSeriesScale","Decimation","Filler","Legend","Title","Tooltip","SubTitle","CreateMember","group","member","setData","users","setUsers","text","org","Dropdown","search","selection","options","textContent","widgets","RequestsGraph","canvasRef","useRef","labels","datasets","color1","Math","random","color2","color3","x","y","r","backgroundColor","borderColor","tension","myChart","current","responsive","scales","display","suggestedMin","suggestedMax","destroy","ref","Parteis","setParteis","isLocal","Members","groups","Object","keys","BlocktreeWidgets","innerHTML","ElementreeElement","getAttribute","dataset","HTMLElement","customElements","define","render","document","root","getElementById"],"mappings":"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","file":"static/js/main.fe9d488f.chunk.js","sourcesContent":["import React, { useState, useCallback, createContext, useContext } from \"react\";\n\n// Create Context Object\nconst GlobalStateContext = createContext({});\n\nlet globalState, setGlobalState;\n\n// Create a provider for components to consume and subscribe to changes\nexport const GlobalStateProvider = (props) => {\n\n  [globalState, setGlobalState] = useState(props.store || {});\n\n  return (<GlobalStateContext.Provider value={[globalState, setGlobalState]} >\n    {props.children}\n  </GlobalStateContext.Provider>\n  );\n};\n\n// Get State Data\nexport const useGlobalState = (type, data) => {\n  const [_globalState, setGlobalState] = useContext(GlobalStateContext);\n\n  if (type && data !== undefined) {\n    globalState[type] = data;\n  }\n\n  return [\n    type ? globalState[type] : globalState,\n    (data) => {\n      setGlobalState({ ...globalState, [type]: data })\n    }\n  ];\n}\n\n// Get useGlobalState as default\nexport default useGlobalState;","import React, { useState } from \"react\";\nimport ReactDOM from 'react-dom';\n\n// AddComponent instance;\nlet AddComponent;\n\n// Create a provider for components to consume and subscribe to changes\nexport const BlocktreeProvider = (props) => {\n\n  // components hook\n  const [components, setComponents] = useState([]);\n\n  // allow inset widgets outside of react component;\n  AddComponent = (el, component, settings = {}) => {\n    // create a portal component\n    component = ReactDOM.createPortal(React.createElement(component, settings), el);\n    // add to the hook state\n    setComponents([...components, component]);\n  }\n\n  return components;\n\n};\n\n// Get AddComponent function\nexport default AddComponent;\nexport { AddComponent as AddComponent };","import React, { useState, useEffect } from 'react'\nimport { List, Header, Icon, Segment, Divider, Label } from 'semantic-ui-react';\nimport { useGlobalState } from \"../contexts/GlobalState\";\nimport DamlJsonApi from '../services/DamlJsonApi';\n\nconst list = [];\nlet ws1;\nlet ws2;\n\n/**\n * React component for the `All Requests` of the `App`.\n */\nconst AllRequests: React.FC = () => {\n\n  // global states\n  const party = DamlJsonApi.party;\n  const [user, setUser] = useGlobalState('user'); // enable context recycling\n\n  // local states\n  const [items, setItems] = useState();\n\n  // filter items\n  let itemsDiplays;\n  if (items) {\n    itemsDiplays = items.map(item => ({ ...item.payload, contractId: item.contractId }));\n    itemsDiplays.sort((a, b) => new Date(a.flight.time).getTime() - new Date(b.flight.time).getTime());\n  }\n\n  // load requests\n  useEffect(() => {\n    (async () => {\n\n      if (!party) {\n        ws1?.close();\n        ws2?.close();\n        setItems();\n      } else {\n\n        // setup FlightRequest listener\n        ws1 = DamlJsonApi.querySocket([\"User:FlightRequest\"]);\n        ws1.addEventListener(\"message\", (event) => {\n          const isUpdate = DamlJsonApi.messageHandler(event, list);\n          isUpdate && setItems([...list]);\n        });\n\n        // setup CompletedRequest listener\n        ws2 = DamlJsonApi.querySocket([\"User:CompletedRequest\"]);\n        ws2.addEventListener(\"message\", (event) => {\n          const isUpdate = DamlJsonApi.messageHandler(event, list);\n          isUpdate && setItems([...list]);\n        });\n      }\n\n    })()\n  }, [party])\n\n  // template\n  return (\n    <Segment className=\"daml-section\">\n\n      <Header as='h2'>\n        <Icon name='globe' />\n        <Header.Content>All Requests</Header.Content>\n      </Header>\n\n      <Divider />\n\n      <List relaxed className=\"items\">\n        {itemsDiplays && itemsDiplays.map((item, key) => (\n          <Segment key={item.contractId}>\n            {(item.approvers.length === item.parties.length) ?\n              <Label color='green' ribbon className=\"label\">\n                Approve\n              </Label>\n              :\n              <Label color='blue' ribbon className=\"label\">\n                Request\n              </Label>\n            }\n            <List.Item>Info: <strong>lat: {item.flight.lat}, lng: {item.flight.lng}, altitude: {item.flight.altitude}</strong></List.Item>\n            <List.Item>Time: <strong>{item.flight.timeStart} --> {item.flight.timeEnd}</strong></List.Item>\n            <List.Item>User: <strong>{item.user.split(\"::\")[0]}</strong></List.Item>\n          </Segment>\n        ))}\n      </List>\n\n    </Segment>\n  );\n}\n\nexport default AllRequests;\n\n// <List.Item>Approvers: <strong>{item.approvers.join(', ') || '---'}</strong></List.Item>\n// <List.Item>Disapprovers: <strong>{item.disapprovers.join(', ') || '---'}</strong></List.Item>","import React, { useState, useEffect } from 'react'\nimport { List, Header, Icon, Segment, Divider, Label } from 'semantic-ui-react';\nimport { useGlobalState } from \"../contexts/GlobalState\";\nimport DamlJsonApi from '../services/DamlJsonApi';\n\nconst list = [];\nlet ws;\n\n/**\n * React component for the `My Requests` of the `App`.\n */\nconst MyRequests: React.FC = () => {\n\n  // global states\n  const party = DamlJsonApi.party;\n  const [user, setUser] = useGlobalState('user'); // enable context recycling\n\n  // local states\n  const [items, setItems] = useState();\n\n  // filter items\n  let itemsDiplays;\n  if (items) {\n    itemsDiplays = items\n      .filter(item =>\n        item.payload.disapprovers.length + item.payload.approvers.length < item.payload.parties.length\n      )\n      .map(item => ({ ...item.payload, contractId: item.contractId }))\n      .reverse();\n  }\n\n  // load items\n  useEffect(() => {\n    (async () => {\n\n      if (!party) {\n        ws?.close();\n        setItems(null);\n      } else {\n        // setup listener \n        ws = DamlJsonApi.querySocket([\"User:FlightRequest\"], { user: party });\n        ws.addEventListener(\"message\", (event) => {\n          const isUpdate = DamlJsonApi.messageHandler(event, list);\n          isUpdate && setItems([...list]);\n        });\n      }\n\n    })()\n  }, [party])\n\n  // template\n  return (\n    <Segment className=\"daml-section\">\n\n      <Header as='h2'>\n        <Icon name='globe' />\n        <Header.Content>\n          My Requests\n        </Header.Content>\n      </Header>\n\n      <Divider />\n\n      <List relaxed className=\"items\">\n        {itemsDiplays && itemsDiplays.map((item, key) => (\n          <Segment key={item.contractId}>\n            <Label color='blue' ribbon className=\"label\">\n              Request\n            </Label>\n            <List>\n              <List.Item>Info: <strong>lat: {item.flight.lat}, lng: {item.flight.lng}, altitude: {item.flight.altitude}</strong></List.Item>\n              <List.Item>Time: <strong>{item.flight.timeStart} --> {item.flight.timeEnd}</strong></List.Item>\n              <List.Item>Approvers: <strong>{item.approvers.map(i => i.split(\"::\")[0]).join(', ') || '---'}</strong></List.Item>\n              <List.Item>Disapprovers: <strong>{item.disapprovers.map(i => i.split(\"::\")[0]).join(', ') || '---'}</strong></List.Item>\n            </List>\n          </Segment>\n        ))}\n      </List>\n\n    </Segment>\n  );\n}\n\nexport default MyRequests;","import React, { useState, useEffect } from 'react'\nimport { List, Header, Icon, Segment, Divider } from 'semantic-ui-react';\nimport { useGlobalState } from \"../contexts/GlobalState\";\nimport DamlJsonApi from '../services/DamlJsonApi';\n\nconst list = [];\nlet ws;\n\n/**\n * React component for the `My Approved Requests` of the `App`.\n */\nconst MyApprovedRequests: React.FC = () => {\n\n  // global states\n  const party = DamlJsonApi.party;\n  const [user, setUser] = useGlobalState('user'); // enable context recycling\n\n  // local states\n  const [items, setItems] = useState();\n\n  // filter items\n  let itemsDiplays;\n  if (items) {\n    itemsDiplays = items.map(item => ({ ...item.payload, contractId: item.contractId })).reverse();\n  }\n\n  // load items\n  useEffect(() => {\n    (async () => {\n\n      if (!party) {\n        ws?.close();\n        setItems(null);\n      } else {\n        // setup listener \n        ws = DamlJsonApi.querySocket([\"User:CompletedRequest\"], { user: party });\n        ws.addEventListener(\"message\", (event) => {\n          const isUpdate = DamlJsonApi.messageHandler(event, list);\n          isUpdate && setItems([...list]);\n        });\n      }\n\n    })()\n  }, [party])\n\n  // template\n  return (\n    <Segment className=\"daml-section\">\n\n      <Header as='h2'>\n        <Icon name='globe' />\n        <Header.Content>My Approved Requests</Header.Content>\n      </Header>\n\n      <Divider />\n\n      <List relaxed className=\"items\">\n        {itemsDiplays && itemsDiplays.map((item, key) => (\n          <Segment key={item.contractId}>\n            <List.Item>Time: <strong>{new Date(item.flight.timeStart).toLocaleString()} -> {new Date(item.flight.timeEnd).toLocaleString()}</strong></List.Item>\n            <List.Item>Info: <strong>lat: {item.flight.lat} | lng: {item.flight.lng} | altitude: {item.flight.altitude}</strong></List.Item>\n          </Segment>\n        ))}\n      </List>\n\n    </Segment>\n  );\n}\n\nexport default MyApprovedRequests;","import React, { useState, useEffect } from 'react'\nimport { List, Button, Header, Icon, Segment, Divider, Label } from 'semantic-ui-react';\nimport { useGlobalState } from \"../contexts/GlobalState\";\nimport DamlJsonApi from '../services/DamlJsonApi';\nimport { ContractId } from '@daml/types';\nimport { PinMap } from './Maps';\n\nconst list = [];\nlet ws;\n\n/**\n * React component for the `Requests For Approval` of the `App`.\n */\nconst RequestsForApproval: React.FC = () => {\n\n  // global states\n  const party = DamlJsonApi.party;\n  const [user, setUser] = useGlobalState('user'); // enable context recycling\n\n  // local states\n  const [items, setItems] = useState();\n  const [showMap, setShowMap] = React.useState(false);\n\n  // filter items\n  let itemsDiplays;\n  if (items) {\n    itemsDiplays = items\n      .filter(item =>\n        (item.payload.parties.includes(party)) && //  || item.signatories.includes(party)\n        !(item.payload.approvers.includes(party) || item.payload.disapprovers.includes(party))\n      )\n      .map(item => ({ ...item.payload, contractId: item.contractId }));\n  }\n\n  // load items\n  useEffect(() => {\n    (async () => {\n\n      if (!party) {\n        ws?.close();\n        setItems(null);\n      } else {\n        // setup listener \n        ws = DamlJsonApi.querySocket([\"User:FlightRequest\"]);\n        ws.addEventListener(\"message\", (event) => {\n          const isUpdate = DamlJsonApi.messageHandler(event, list);\n          isUpdate && setItems([...list]);\n        });\n      }\n\n    })()\n  }, [party])\n\n  // approve handler\n  async function approveRequest(contractId: ContractId<User.FlightRequest>) {\n    await DamlJsonApi.exercise('User:FlightRequest', contractId, 'Approved', { approver: party });\n  };\n\n  // disapprove handler\n  async function disapproveRequest(contractId: ContractId<User.FlightRequest>) {\n    await DamlJsonApi.exercise('User:FlightRequest', contractId, 'Disapproved', { disapprover: party });\n  };\n\n  // template\n  return (\n    <Segment className=\"daml-section\">\n\n      <Header as='h2'>\n        <Icon name='globe' />\n        <Header.Content>\n          Requests For Approval\n        </Header.Content>\n      </Header>\n\n      <Divider />\n\n      <List relaxed className=\"items\">\n        {itemsDiplays && itemsDiplays.map((item, key) => (\n          <Segment key={item.contractId}>\n            <Label as='a' color='teal' ribbon={true}>\n              Review\n            </Label>\n            {\n              <div className=\"create-request-map\" style={{ width: \"100%\", height: showMap ? \"200px\" : \"0px\" }}>\n                {showMap && (<PinMap lat={parseFloat(item.flight.lat)} lng={parseFloat(item.flight.lng)} />)}\n              </div>}\n            <List.Item>Time: <strong>{item.flight.timeStart} --> {item.flight.timeEnd}</strong></List.Item>\n            <List.Item>Location: <strong>lat: {item.flight.lat},  lng: {item.flight.lng},  altitude: {item.flight.altitude}</strong></List.Item>\n            <List.Item>User: <strong>{item.user.split(\"::\")[0]}</strong></List.Item>\n\n            {item.parties.includes(party) &&\n              <div className=\"actions\">\n                <Button\n                  positive\n                  onClick={() => approveRequest(item.contractId)}\n                >Approve</Button>\n                <Button\n                  secondary\n                  onClick={() => disapproveRequest(item.contractId)}\n                >Disapprove</Button>\n                <Button basic color='blue' icon labelPosition='left'\n                  onClick={() => { setShowMap(!showMap) }}\n                >\n                  <Icon name='map' />map\n                </Button>\n              </div>\n            }\n          </Segment>\n        ))}\n      </List>\n\n    </Segment>\n  );\n}\n\nexport default RequestsForApproval;","import { encode } from 'jwt-simple';\n\n/**\n * Class representing a DamlJsonApi (https://docs.daml.com/json-api/index.html).\n *\n * @class\n */\nclass DamlJsonApi {\n\n  /**\n   * Holds the api base url\n   * @var {srting} baseUrl.\n   */\n  baseUrl;\n\n  /**\n   * Holds the credentials token\n   * @var {srting} token.\n   */\n  token;\n\n  /**\n   * Holds the party name\n   * @var {srting} party.\n   */\n  party;\n\n  /**\n   * Holds the parteis list\n   * @var {srting} parteis.\n   */\n  parteis;\n\n  /**\n   * Represents a DamlJsonApi.\n   * @constructor\n  */\n  constructor(baseUrl = `${window.location.host}/v1`) {\n    // select params\n    const url = new URL(window.location.toString());\n    const baseUrlParam = url.searchParams.get('baseUrl');\n\n    // initialization variables\n    this.baseUrl = baseUrlParam || baseUrl;\n    this.token = sessionStorage.getItem('token');\n    this.party = sessionStorage.getItem('party');\n  }\n\n  /**\n   * create credentials to Daml service\n   * @function createCredentials\n   * @param {string} party\n   * @param {string} ledgerId\n   */\n  async createCredentials(ledgerId, party) {\n\n    // select ledgerId\n    if (!ledgerId) {\n      const url = new URL(window.location.toString());\n      ledgerId = url.searchParams.get('ledgerId');\n    }\n\n    // no ledgerId\n    if (!ledgerId) {\n      alert(\"'ledgerId' must appear in URL parameters.\");\n      return;\n    }\n\n    // create payload\n    const payload = {\n      \"https://daml.com/ledger-api\": {\n        \"ledgerId\": ledgerId,\n        \"applicationId\": \"dfa-sandbox\",\n        //\"participantId\": null,\n        //\"admin\": true,\n        //\"readAs\": [\"Bob\"]\n        \"actAs\": [party]\n      },\n      // \"exp\": 1300819380\n    }\n\n    // generate token\n    const SECRET_KEY = 'secret';\n    const token = encode(payload, SECRET_KEY, 'HS256');\n\n    // save local\n    sessionStorage.setItem('token', token);\n    sessionStorage.setItem('party', party);\n    this.token = token;\n    this.party = party;\n  }\n\n  /**\n   * Logout from Daml service\n   * @function logout\n   */\n  logout() {\n    this.token = null;\n    this.party = null;\n    sessionStorage.removeItem(\"token\");\n    sessionStorage.removeItem(\"party\");\n  }\n\n  /**\n   * Basic Daml jsonApi post\n   * @function post\n   * @param {string} path\n   * @param {null|string|array|object} body\n   * @return {promise} the response\n   */\n  post(path, body) {\n\n    // fetch with Authorization header\n    return fetch(`//${this.baseUrl}${path}`, {\n      method: 'post',\n      //mode: 'no-cors',\n      headers: {\n        \"Authorization\": `Bearer ${this.token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body || ''),\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        if (res.status < 200 && res.status > 299) {\n          throw res.errors;\n        }\n        return res;\n      })\n      .catch((error) => console.log(error) /* && alert(`Error sending message:\\n${JSON.stringify(error)}`) */);\n\n  }\n\n  /**\n   * Basic Daml jsonApi get\n   * @function get\n   * @param {string} path\n   * @return {promise} the response\n   */\n  get(path) {\n\n    // fetch with Authorization header\n    return fetch(`//${this.baseUrl}${path}`, {\n      method: 'get',\n      //mode: 'no-cors',\n      headers: {\n        \"Authorization\": `Bearer ${this.token}`,\n        \"Content-Type\": \"application/json\"\n      },\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        if (res.status < 200 && res.status > 299) {\n          throw res.errors;\n        }\n        return res;\n      })\n      .catch((error) => console.log(error) /* && alert(`Error sending message:\\n${JSON.stringify(error)}`) */);\n\n  }\n\n  /**\n   * Get the Daml parteis\n   * @function getParteis\n   * @return {promise} the response\n   */\n  async getParteis() {\n    if (this.parteis) {\n      return this.parteis;\n    }\n    const res = await this.get('/parties');\n    return this.parteis = res.result;\n  }\n\n  /**\n   * Add a Daml party\n   * @function addParty\n   * @param {string} party\n   * @param {string} displayName\n   * @return {promise} the response\n   */\n  async addParty(identifierHint, displayName) {\n    return this.post('/parties/allocate', { identifierHint, displayName });\n  }\n\n  /**\n   * Create a Daml contract\n   * @function create\n   * @param {string} templateId\n   * @param {null|object} payload\n   * @return {promise} the response\n   */\n  create(templateId, payload) {\n    return this.post('/create', { templateId, payload });\n  }\n\n  /**\n   * Exercise of a Daml contract\n   * @function exercise\n   * @param {string} templateId\n   * @param {string} contractId\n   * @param {string} choice\n   * @param {null|object} argument\n   * @return {promise} the response\n   */\n  exercise(templateId, contractId, choice, argument) {\n    return this.post('/exercise', { templateId, contractId, choice, argument });\n  }\n\n  /**\n   * Query of a Daml contracts\n   * @function query\n   * @param {array} templateIds\n   * @param {null|object} query\n   * @param {null|array} readers\n   * @return {promise} the response\n   */\n  query(templateIds, query, readers) {\n    return this.post('/query', { templateIds, query, readers });\n  }\n\n  /**\n   * Create query socket of Daml query\n   * @function querySocket\n   * @param {array} templateIds\n   * @param {null|object} query\n   * @param {null|array} readers\n   * @return {promise} the response\n   */\n  querySocket(templateIds, query, readers) {\n\n    // select protocol\n    const protocol = (window.location.protocol == 'https:') ? 'wss' : 'ws';\n    \n    // create service\n    const ws = new WebSocket(\n      `${protocol}://${this.baseUrl}/stream/query`,\n      [`jwt.token.${this.token}`, 'daml.ws.auth']\n    );\n\n    // send query\n    ws.addEventListener(\"open\", () => {\n      ws.send(JSON.stringify({ templateIds, query, readers }));\n    });\n\n    // add listener\n    //ws.addEventListener(\"message\", (event) => {\n    //  console.log( JSON.parse(event.data) )\n    //);\n\n    return ws;\n  }\n\n  /**\n   * Message Handler of Daml query socket\n   * @function querySocket\n   * @param {object} event\n   * @param {null|array} list\n   * @return {list} the list\n   */\n  messageHandler(event, list) {\n\n    let isUpdate = false;\n\n    // selete events\n    const data = JSON.parse(event.data);\n\n    // add/remove by the events\n    data.events.forEach(item => {\n      if (item.archived) {\n        const index = list.findIndex(i => i.contractId == item.archived.contractId)\n        list.splice(index, 1);\n      } else if (item.created) {\n        list.push(item.created);\n      }\n      isUpdate = true;\n    });\n\n    return isUpdate;\n  }\n}\n\n// create a singleton instance of DamlJsonApi\nlet $instance = null;\nexport default $instance || ($instance = new DamlJsonApi());\n","import React, { useState, useEffect, useCallback } from 'react'\nimport { Button, Form, Grid, Header, Segment } from 'semantic-ui-react'\nimport { useGlobalState } from \"../contexts/GlobalState\";\nimport DamlJsonApi from '../services/DamlJsonApi';\n\n/**\n * React component for the login screen of the `App`.\n */\nconst LoginScreen: React.FC = ({ ledgerId, onLogin }) => {\n\n  // local states\n  const [party, setParty] = useState('');\n\n  // oauth2 handler\n  const oauth2Login = () => {\n    // window.location.assign(`https://login.projectdabl.com/auth/login?ledgerId=${ledgerId}`);\n  }\n\n  // oauth2 callback handler\n  const url = new URL(window.location.toString());\n  const token = url.searchParams.get('token');\n  if (token) {\n    // const party = url.searchParams.get('party');\n    // if (party === null) {\n    //   throw Error(\"When 'token' is passed via URL, 'party' must be passed too.\");\n    // }\n    // url.search = '';\n    // window.history.replaceState(window.history.state, '', url.toString());\n    // ...\n    // onLogin();\n  }\n\n  // login handler\n  const simpleLogin = async (event: React.FormEvent) => {\n    event.preventDefault();\n    DamlJsonApi.createCredentials(ledgerId, party);\n    onLogin();\n  }\n\n  // template\n  return (\n    <Grid className=\"login-from\" textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n\n      <Grid.Column style={{ maxWidth: 450 }}>\n\n        <Header as='h1' textAlign='center' size='huge' style={{ color: '#223668' }}>\n          <Header.Content>\n            Distrubuted Flight Approval\n          </Header.Content>\n        </Header>\n\n        <Form size='large' className='test-select-login-screen'>\n\n          <Segment>\n\n            <Form.Input\n              fluid\n              icon='user'\n              iconPosition='left'\n              placeholder='Username'\n              className='test-select-username-field'\n              onChange={e => setParty(e.currentTarget.value)}\n            />\n\n            <Button\n              primary\n              fluid\n              className='test-select-login-button'\n              onClick={simpleLogin}\n              disabled={!party}>\n              Log in\n            </Button>\n\n          </Segment>\n\n        </Form>\n\n      </Grid.Column>\n\n    </Grid>\n  );\n};\n\nexport default LoginScreen;\n\n         // <Button primary fluid onClick={oauth2Login}>\n         //        Log in with DABL\n         //      </Button>","import React, { useState } from 'react';\nimport { Menu } from 'semantic-ui-react'\nimport { useGlobalState } from \"../contexts/GlobalState\";\nimport DamlJsonApi from '../services/DamlJsonApi';\nimport LoginScreen from './LoginScreen';\n\n/**\n * React component for the `User Widget` of the `App`.\n */\nconst UserWidget: React.FC = ({ ledgerId }) => {\n\n  // global states\n  const party = DamlJsonApi.party;\n  const [user, setUser] = useGlobalState('user');\n\n  // local states\n  const [showLogin, setShowLogin] = useState(false);\n\n  // login handler\n  const onLogin = async () => {\n    setUser({});\n    // reset data\n    setShowLogin(false);\n  }\n\n  // logout handler\n  const onLogout = () => {\n    DamlJsonApi.logout();\n    setUser(null);\n  }\n\n  // template\n  return (\n    <Menu icon borderless>\n\n      <Menu.Menu position='right' className='test-select-main-menu'>\n\n        {party &&\n          <Menu.Item position='right'>You are logged in as {party.split(\"::\")[0]}.</Menu.Item>\n        }\n        {party &&\n          <Menu.Item\n            position='right'\n            active={false}\n            className='test-select-log-out'\n            onClick={onLogout}\n            icon='log out'\n            title='log out'\n          />\n        }\n        {!party &&\n          <Menu.Item\n            position='right'\n            active={false}\n            className='test-select-sign-in'\n            onClick={() => setShowLogin(!showLogin)}\n            icon='sign in'\n            title='sign in'\n          />\n        }\n\n      </Menu.Menu>\n\n      {showLogin &&\n        <LoginScreen ledgerId={ledgerId} onLogin={onLogin} />\n      }\n\n    </Menu>\n  );\n};\n\nexport default UserWidget;\n","import React, { useState } from \"react\"\nimport { GoogleMap, InfoWindow, Marker, withGoogleMap, withScriptjs } from \"react-google-maps\"\n\ntype PinProps = {\n  lat: number;\n  lng: number;\n}\n\ntype ChooseProps = {\n  onSubmit: Function\n}\n\nconst CustomMarker = (props: any) => {\n  const [infoVisible, setInfoVisible] = useState(false);\n  return <Marker\n    position={props.position}\n    visible={props.visible}\n    onMouseOver={() => {\n      setInfoVisible(true);\n    }}\n    onMouseOut={() => {\n      setInfoVisible(false);\n    }}>\n    {infoVisible && (<InfoWindow><h4>Lat: {props.position.lat}<br /> Lng: {props.position.lng}</h4></InfoWindow>)}\n  </Marker>\n}\n\nconst UncomposedPinsMap = withScriptjs(withGoogleMap((props: any) => (\n  <GoogleMap\n    defaultZoom={8}\n    defaultCenter={{ lat: props.lat, lng: props.lng }}>\n    <CustomMarker\n      position={{ lat: props.lat, lng: props.lng }}\n      visible={true}>\n    </CustomMarker>\n  </GoogleMap>\n)));\n\nexport const PinMap = (props: PinProps) => (\n  <UncomposedPinsMap\n    googleMapURL={\"https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyCGNWEx_cSfFlxaon2GjBqynYxrAD7kJbY&libraries=geometry,drawing,places\"}\n    loadingElement={<div style={{ height: `100%` }} />}\n    containerElement={<div style={{ height: `100%` }} />}\n    mapElement={<div style={{ height: `100%` }} />}\n    lat={props.lat}\n    lng={props.lng}></UncomposedPinsMap>\n)\n\nconst UncomposedChooseMap = withScriptjs(withGoogleMap((props: any) => {\n\n  const [center, setCenter] = useState({ lat: 33.36157687471931, lng: 35.648549973336756 });\n  const [zoom, setZoom] = useState(9)\n  const [markerPosition, setMarkerPosition] = useState({ lat: 33.36157687471931, lng: 35.648549973336756 })\n  const [markerVisible, setMarkerVisible] = useState(false)\n\n  return <GoogleMap\n    onRightClick={(e) => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          position => {\n            setCenter({ lat: position.coords.latitude, lng: position.coords.longitude })\n            setZoom(13)\n          }\n        )\n      }\n    }}\n    onClick={(e) => {\n      if (e.latLng) {\n        setMarkerPosition({ lat: e.latLng.lat(), lng: e.latLng.lng() })\n        setMarkerVisible(true)\n        props.onSubmit(e.latLng.lat(), e.latLng.lng())\n      }\n    }}\n    zoom={zoom}\n    center={center}\n    defaultZoom={8}\n    defaultCenter={{ lat: 0, lng: 0 }}>\n    <CustomMarker\n      position={markerPosition}\n      visible={markerVisible}>\n    </CustomMarker>\n  </GoogleMap>\n}));\n\nexport const ChooseMap = (props: ChooseProps) => (\n  <UncomposedChooseMap\n    googleMapURL={\"https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyCGNWEx_cSfFlxaon2GjBqynYxrAD7kJbY&libraries=geometry,drawing,places\"}\n    loadingElement={<div style={{ height: `100%` }} />}\n    containerElement={<div style={{ height: `100%` }} />}\n    mapElement={<div style={{ height: `100%` }} />}\n    onSubmit={props.onSubmit}></UncomposedChooseMap>\n)","import React, { useState } from 'react'\nimport { Form, Button, Header, Icon, Segment, Divider } from 'semantic-ui-react';\nimport { useGlobalState } from \"../contexts/GlobalState\";\nimport DamlJsonApi from '../services/DamlJsonApi';\nimport { ChooseMap } from './Maps';\n\ntype Flight = {\n  lat: string;\n  lng: string;\n  timeStart: string;\n  timeEnd: string;\n  altitude: string;\n}\n\nconst observers = [\"Zoolog\", \"Meteorologist\", \"Hamal\"];\n\n/**\n * React component for the `Create Request` of the `App`.\n */\nconst CreateRequest: React.FC<Props> = () => {\n\n  // global states\n  const party = DamlJsonApi.party;\n  const [user, setUser] = useGlobalState('user'); // enable context recycling\n\n  // local states\n  const [flight, setFlight] = useState<Flight>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showMap, setShowMap] = useState(true);\n\n  // submit handler\n  const submit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    setIsSubmitting(true);\n\n    // select observers identifier\n    const allParteis = await DamlJsonApi.getParteis();\n    const parties = allParteis.filter(i => observers.includes(i.displayName)).map(i => i.identifier);\n\n    // create a FlightRequest\n    const res = await DamlJsonApi.create('User:FlightRequest', { user: party, parties, flight, approvers: [], disapprovers: [] })\n      .catch(() => setIsSubmitting(false));\n\n    setIsSubmitting(false);\n  };\n\n  // template\n  return (\n    <Segment className=\"daml-section\">\n\n      <Header as='h2'>\n        <Icon name='globe' />\n        <Header.Content>Create Request</Header.Content>\n      </Header>\n\n      <Divider />\n\n      {party &&\n\n        <Form className=\"create-request-form\">\n\n          <Button basic color='blue' icon labelPosition='left' onClick={() => { setShowMap(!showMap) }} >\n            <Icon name='map' /> map\n          </Button>\n\n          <div className=\"create-request-map\" style={{ width: \"100%\", height: showMap ? \"400px\" : \"0px\" }}>\n            {showMap &&\n              <ChooseMap onSubmit={(lat: number, lng: number) => setFlight({ ...flight, lat: lat.toString(), lng: lng.toString() })} />\n            }\n          </div>\n\n          <Form.Input\n            className='select-request-content'\n            label=\"lat coordinates\"\n            value={flight.lat}\n            onChange={e => setFlight({ ...flight, lat: e.currentTarget.value })}\n          />\n\n          <Form.Input\n            className='select-request-content'\n            label=\"lng coordinates\"\n            value={flight.lng}\n            onChange={e => setFlight({ ...flight, lng: e.currentTarget.value })}\n          />\n\n          <Form.Input\n            className='select-request-content'\n            label=\"Altitude\"\n            type=\"number\"\n            step='100'\n            min='0'\n            value={flight.altitude}\n            onChange={e => setFlight({ ...flight, altitude: e.currentTarget.value })}\n          />\n\n          <Divider className=\"Divider\" />\n\n          <Form.Input\n            className='select-request-content'\n            label=\"Start time\"\n            type=\"datetime-local\"\n            value={flight.timeStart}\n            onChange={e => setFlight({ ...flight, timeStart: e.currentTarget.value })}\n          />\n\n          <Form.Input\n            className='select-request-content'\n            label=\"End time\"\n            type=\"datetime-local\"\n            value={flight.timeEnd}\n            onChange={e => setFlight({ ...flight, timeEnd: e.currentTarget.value })}\n          />\n\n          <Button\n            primary\n            className='select-request-send-button'\n            onClick={submit}\n            disabled={isSubmitting || !(flight.lat && flight.lng && flight.altitude)}\n            loading={isSubmitting}\n            content=\"Send\"\n          />\n\n        </Form>\n\n      }\n\n    </Segment>\n  );\n};\n\nexport default CreateRequest;\n","import React, { useState, useEffect, useRef } from 'react'\nimport { Header, Icon, Segment, Divider } from 'semantic-ui-react';\nimport { useGlobalState } from \"../contexts/GlobalState\";\nimport DamlJsonApi from '../services/DamlJsonApi';\n\nimport { Chart, ArcElement, LineElement, BarElement, PointElement, BarController, BubbleController, DoughnutController, LineController, PieController, PolarAreaController, RadarController, ScatterController, CategoryScale, LinearScale, LogarithmicScale, RadialLinearScale, TimeScale, TimeSeriesScale, Decimation, Filler, Legend, Title, Tooltip, SubTitle } from 'chart.js';\nChart.register(ArcElement, LineElement, BarElement, PointElement, BarController, BubbleController, DoughnutController, LineController, PieController, PolarAreaController, RadarController, ScatterController, CategoryScale, LinearScale, LogarithmicScale, RadialLinearScale, TimeScale, TimeSeriesScale, Decimation, Filler, Legend, Title, Tooltip, SubTitle);\n\nconst list = [];\nlet ws;\n\n/**\n * React component for the `Requests Graph` of the `App`.\n */\nconst RequestsGraph: React.FC = () => {\n\n  // global states\n  const party = DamlJsonApi.party;\n  const [user, setUser] = useGlobalState('user'); // enable context recycling\n\n  // local states\n  const [items, setItems] = useState();\n  const canvasRef = useRef();\n\n  // load items\n  useEffect(() => {\n    (async () => {\n\n      if (!party) {\n        ws?.close();\n        setItems(null);\n      } else {\n        // setup listener \n        ws = DamlJsonApi.querySocket([\"User:FlightRequest\"], { user: party });\n        ws.addEventListener(\"message\", (event) => {\n          const isUpdate = DamlJsonApi.messageHandler(event, list);\n          isUpdate && setItems([...list]);\n        });\n      }\n\n    })()\n  }, [party])\n\n  // create datasets\n  let timeStart, timeEnd;\n  let labels = [];\n  let datasets = [];\n  if (items) {\n    datasets = items.map(item => {\n      const flight = item.payload.flight;\n      timeStart = new Date(flight.timeStart).toLocaleString();\n      timeEnd = new Date(flight.timeEnd).toLocaleString();\n\n      labels.includes(timeStart) || labels.push(timeStart)\n      labels.includes(timeEnd) || labels.push(timeEnd)\n      const color1 = Math.random() * 200 + 55;\n      const color2 = Math.random() * 200 + 55;\n      const color3 = Math.random() * 200 + 55;\n      return {\n        data: [{\n          x: timeStart,\n          y: flight.altitude,\n          r: 13,\n          backgroundColor: `rgba(${color1}, ${color2}, ${color3}, 1)`,\n        }, {\n          x: timeEnd,\n          y: flight.altitude,\n          r: 13,\n          backgroundColor: `rgba(${color1}, ${color2}, ${color3}, 1)`,\n        }],\n        label: item.payload.user.split(\"::\")[0],\n        borderColor: `rgba(${color1}, ${color2}, ${color3}, 1)`,\n        backgroundColor: `rgba(${color1}, ${color2}, ${color3}, 0.5)`,\n        tension: 0.1\n      }\n    });\n  }\n\n  labels.sort((a, b) => new Date(a).getTime() - new Date(b).getTime())\n\n  useEffect(() => {\n    let myChart;\n    if (canvasRef.current) {\n      myChart = new Chart(canvasRef.current, {\n        type: 'line',\n        data: {\n          labels,\n          datasets\n        },\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              display: true,\n              title: {\n                display: true,\n                text: 'altitude'\n              },\n              suggestedMin: 0,\n              suggestedMax: 2000\n            }\n          }\n        },\n      });\n    }\n\n    return () => {\n      myChart && myChart.destroy();\n    };\n  }, [datasets]);\n\n  // template\n  return (\n    <Segment className=\"daml-section\">\n\n      <Header as='h2'>\n        <Icon name='globe' />\n        <Header.Content>Requests Graph</Header.Content>\n      </Header>\n\n      <Divider />\n\n      {items && <canvas ref={canvasRef}></canvas>}\n\n    </Segment>\n  );\n}\n\nexport default RequestsGraph;","import React, { useState, useEffect } from 'react'\nimport { List, Header, Icon, Segment, Divider } from 'semantic-ui-react';\nimport { useGlobalState } from \"../contexts/GlobalState\";\nimport DamlJsonApi from '../services/DamlJsonApi';\n\nconst list = [];\nlet ws;\n\n/**\n * React component for the `Members` of the `App`.\n */\nconst Members: React.FC = () => {\n\n  // global states\n  const party = DamlJsonApi.party;\n  const [user, setUser] = useGlobalState('user'); // enable context recycling\n\n  // local states\n  const [items, setItems] = useState();\n\n  // convert members list to groups\n  let groups = {};\n  if (items) {\n    items.forEach(item => {\n      groups[item.payload.group] || (groups[item.payload.group] = []);\n      groups[item.payload.group].push(item.payload.member.split(\"::\")[0]);\n    });\n  }\n\n  // load items\n  useEffect(() => {\n    (async () => {\n\n      if (!party) {\n        ws?.close();\n        setItems(null);\n      } else {\n        ws = DamlJsonApi.querySocket([\"User:GroupMember\"]);\n        ws.addEventListener(\"message\", (event) => {\n          const isUpdate = DamlJsonApi.messageHandler(event, list);\n          isUpdate && setItems([...list]);\n        });\n      }\n\n    })()\n  }, [party])\n\n  // template\n  return (\n    <Segment className=\"daml-section\">\n\n      <Header as='h2'>\n        <Icon name='globe' />\n        <Header.Content>\n          Members\n        </Header.Content>\n      </Header>\n\n      <Divider />\n\n      <List relaxed className=\"items\">\n        {party && groups && Object.keys(groups).map((group) => (\n          <Segment key={group}>\n            <List.Item>Group: <strong>{group}</strong></List.Item>\n            <List.Item>Members: <strong>{groups[group].join(\", \")}</strong></List.Item>\n          </Segment>\n        ))}\n      </List>\n\n    </Segment>\n  );\n}\n\nexport default Members;","import React, { useState, useEffect } from 'react'\nimport { Form, Button, Header, Icon, Segment, Divider } from 'semantic-ui-react';\nimport { useGlobalState } from \"../contexts/GlobalState\";\nimport DamlJsonApi from '../services/DamlJsonApi';\n\n/**\n * React component for the `Create Member` of the `App`.\n */\nconst CreateMember: React.FC = () => {\n\n  // global states\n  const party = DamlJsonApi.party;\n  const [user, setUser] = useGlobalState('user'); // enable context recycling\n\n  // local states\n  const [data, setData] = useState({ group: '', member: '' });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [users, setUsers] = useState([]);\n\n  // load users\n  useEffect(() => {\n    (async () => {\n\n      if (!party) {\n        setUsers([]);\n      } else {\n        // get daml parteis\n        const parteis = await DamlJsonApi.getParteis();\n        const users = parteis.map(item => ({\n          key: item.identifier,\n          text: item.identifier,\n          value: item.identifier,\n        }));\n        setUsers(users);\n      }\n\n    })()\n  }, [party])\n\n  // submit handler\n  const submit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    setIsSubmitting(true);\n    await DamlJsonApi.create('User:GroupMember', { org: party, group: data.group, member: data.member })\n      .catch(() => {\n        setIsSubmitting(false);\n      });\n    setIsSubmitting(false);\n  };\n\n  // template\n  return (\n    <Segment className=\"daml-section\">\n\n      <Header as='h2'>\n        <Icon name='globe' />\n        <Header.Content>Create Members</Header.Content>\n      </Header>\n\n      <Divider />\n\n      {party &&\n\n        <Form className=\"create-request-form\">\n\n          <Form.Dropdown\n            fluid\n            search\n            selection\n            className='select-request-receiver'\n            placeholder=\"Select group\"\n            options={[\n              { key: \"User\", text: \"User\", value: \"User\" },\n              { key: \"Zoolog\", text: \"Zoolog\", value: \"Zoolog\" },\n              { key: \"Meteorologist\", text: \"Meteorologist\", value: \"Meteorologist\" },\n              { key: \"Hamal\", text: \"Hamal\", value: \"Hamal\" },]}\n            onChange={e => setData({ ...data, group: e.currentTarget.textContent })}\n          />\n\n          <Form.Dropdown\n            fluid\n            search\n            selection\n            className='select-request-receiver'\n            placeholder=\"Select group\"\n            options={users || []}\n            onChange={e => setData({ ...data, member: e.currentTarget.textContent })}\n          />\n\n          <Button\n            primary\n            className='select-request-send-button'\n            onClick={submit}\n            loading={isSubmitting}\n            content=\"Send\"\n          />\n\n        </Form>\n\n      }\n\n    </Segment>\n  );\n};\n\nexport default CreateMember;\n","\n// ========================= Bases ========================= //\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\n\n// ======================= Providers ======================= //\n\nimport { GlobalStateProvider } from \"./contexts/GlobalState\";\nimport { BlocktreeProvider, AddComponent } from \"./contexts/BlocktreeProvider\";\n\n// ====================== Components ======================= //\n\nimport UserWidget from './components/UserWidget';\nimport CreateRequest from './components/CreateRequest';\nimport AllRequests from './components/AllRequests';\nimport MyRequests from './components/MyRequests';\nimport MyApprovedRequests from './components/MyApprovedRequests';\nimport RequestsForApproval from './components/RequestsForApproval';\nimport RequestsGraph from './components/RequestsGraph';\nimport Parteis from './components/Parteis';\nimport CreateMember from './components/CreateMember';\nimport Members from './components/Members';\n\nconst widgets = {\n  UserWidget,\n  CreateRequest,\n  AllRequests,\n  MyRequests,\n  MyApprovedRequests,\n  RequestsForApproval,\n  RequestsGraph,\n  Parteis,\n  CreateMember,\n  Members,\n};\n\n// =================== Boocktree handler =================== //\n\nwindow.BlocktreeWidgets = function (name, el, settings) {\n  try {\n    if (widgets[name]) {\n      AddComponent(el, widgets[name], settings);\n    } else {\n      el.innerHTML = `Block <strong>${name}</strong> is empty client component`;\n    }\n  } catch (error) {\n    el.innerHTML = `Client component is broken. <br/> ${error}`;\n  }\n}\n\nclass ElementreeElement extends HTMLElement {\n  connectedCallback() {\n    const name = this.getAttribute(\"name\")\n    try {\n      if (widgets[name]) {\n        AddComponent(this, widgets[name], this.dataset);\n      } else {\n        this.innerHTML = `Block <strong>${name}</strong> is empty client component`;\n      }\n    } catch (error) {\n      this.innerHTML = `Client component is broken. <br/> ${error}`;\n    }\n  }\n}\ncustomElements.define('elementree-widget', ElementreeElement);\n\n// ========================= Setup ========================= //\n\n// setup as Blocktree\nReactDOM.render(\n  <GlobalStateProvider>\n    <BlocktreeProvider />\n  </GlobalStateProvider>,\n  document.createElement('div')\n);\n\n// ========================= Test ========================== //\n\nconst root = document.getElementById('root');\n\nroot && (root.innerHTML = `\n  <elementree-widget name='UserWidget'></elementree-widget>\n\n  <elementree-widget name='CreateMember'></elementree-widget>\n  <elementree-widget name='Members'></elementree-widget>\n\n  <elementree-widget name='CreateRequest'></elementree-widget>\n  <elementree-widget name='MyRequests'></elementree-widget>\n\n  <elementree-widget name='MyApprovedRequests'></elementree-widget>\n\n  <elementree-widget name='RequestsForApproval'></elementree-widget>\n\n  <elementree-widget name='RequestsGraph'></elementree-widget>\n\n  <elementree-widget name='AllRequests'></elementree-widget>\n\n  <elementree-widget name='Parteis'></elementree-widget>\n`);\n","import React, { useState, useEffect } from 'react'\nimport { List, Header, Icon, Segment, Divider } from 'semantic-ui-react';\nimport { useGlobalState } from \"../contexts/GlobalState\";\nimport DamlJsonApi from '../services/DamlJsonApi';\n\n/**\n * React component for the `Parteis` of the `App`.\n */\nconst Parteis: React.FC = () => {\n\n  // global states\n  const party = DamlJsonApi.party;\n  const [user, setUser] = useGlobalState('user'); // enable context recycling\n\n  // local states\n  const [parteis, setParteis] = useState();\n\n  // load users\n  useEffect(() => {\n    (async () => {\n\n      if (!party) {\n        setParteis(null);\n      } else {\n        const parteis = await DamlJsonApi.getParteis();\n        setParteis(parteis);\n      }\n\n    })()\n  }, [party])\n\n  // template\n  return (\n    <Segment className=\"daml-section\">\n\n      <Header as='h2'>\n        <Icon name='globe' />\n        <Header.Content>\n          Parteis\n        </Header.Content>\n      </Header>\n\n      <Divider />\n\n      <List relaxed className=\"items\">\n        {party && parteis && parteis.map((item, key) => (\n          <Segment key={item.identifier}>\n            <List.Item>Display name: <strong>{item.displayName}</strong></List.Item>\n            <List.Item>Identifier: <strong>{item.identifier}</strong></List.Item>\n            <List.Item>Is local: <strong>{item.isLocal ? 'yes' : 'no'}</strong></List.Item>\n          </Segment>\n        ))}\n      </List>\n\n    </Segment>\n  );\n}\n\nexport default Parteis;"],"sourceRoot":""}