{"version":3,"file":"index.umd.js","sources":["../src/result.ts","../src/decoder.ts","../src/combinators.ts"],"sourcesContent":["/**\n * The result of a computation that may fail. The decoding function\n * `Decoder.run` returns a `Result`. The value of a `Result` is either `Ok` if\n * the computation succeeded, or `Err` if there was some failure in the\n * process.\n */\nexport type Result<V, E> = Ok<V> | Err<E>;\n\n/**\n * The success type variant for `Result`. Denotes that a result value was\n * computed with no errors.\n */\nexport interface Ok<V> {\n  ok: true;\n  result: V;\n}\n\n/**\n * The error type variant for `Result`. Denotes that some error occurred before\n * the result was computed.\n */\nexport interface Err<E> {\n  ok: false;\n  error: E;\n}\n\n/**\n * Wraps values in an `Ok` type.\n *\n * Example: `ok(5) // => {ok: true, result: 5}`\n */\nexport const ok = <V>(result: V): Ok<V> => ({ok: true, result: result});\n\n/**\n * Typeguard for `Ok`.\n */\nexport const isOk = <V>(r: Result<V, any>): r is Ok<V> => r.ok === true;\n\n/**\n * Wraps errors in an `Err` type.\n *\n * Example: `err('on fire') // => {ok: false, error: 'on fire'}`\n */\nexport const err = <E>(error: E): Err<E> => ({ok: false, error: error});\n\n/**\n * Typeguard for `Err`.\n */\nexport const isErr = <E>(r: Result<any, E>): r is Err<E> => r.ok === false;\n\n/**\n * Create a `Promise` that either resolves with the result of `Ok` or rejects\n * with the error of `Err`.\n */\nexport const asPromise = <V>(r: Result<V, any>): Promise<V> =>\n  r.ok === true ? Promise.resolve(r.result) : Promise.reject(r.error);\n\n/**\n * Unwraps a `Result` and returns either the result of an `Ok`, or\n * `defaultValue`.\n *\n * Example:\n * ```\n * Result.withDefault(5, number().run(json))\n * ```\n *\n * It would be nice if `Decoder` had an instance method that mirrored this\n * function. Such a method would look something like this:\n * ```\n * class Decoder<A> {\n *   runWithDefault = (defaultValue: A, json: any): A =>\n *     Result.withDefault(defaultValue, this.run(json));\n * }\n *\n * number().runWithDefault(5, json)\n * ```\n * Unfortunately, the type of `defaultValue: A` on the method causes issues\n * with type inference on  the `object` decoder in some situations. While these\n * inference issues can be solved by providing the optional type argument for\n * `object`s, the extra trouble and confusion doesn't seem worth it.\n */\nexport const withDefault = <V>(defaultValue: V, r: Result<V, any>): V =>\n  r.ok === true ? r.result : defaultValue;\n\n/**\n * Return the successful result, or throw an error.\n */\nexport const withException = <V>(r: Result<V, any>): V => {\n  if (r.ok === true) {\n    return r.result;\n  } else {\n    throw r.error;\n  }\n};\n\n/**\n * Given an array of `Result`s, return the successful values.\n */\nexport const successes = <A>(results: Result<A, any>[]): A[] =>\n  results.reduce((acc: A[], r: Result<A, any>) => (r.ok === true ? acc.concat(r.result) : acc), []);\n\n/**\n * Apply `f` to the result of an `Ok`, or pass the error through.\n */\nexport const map = <A, B, E>(f: (value: A) => B, r: Result<A, E>): Result<B, E> =>\n  r.ok === true ? ok<B>(f(r.result)) : r;\n\n/**\n * Apply `f` to the result of two `Ok`s, or pass an error through. If both\n * `Result`s are errors then the first one is returned.\n */\nexport const map2 = <A, B, C, E>(f: (av: A, bv: B) => C, ar: Result<A, E>, br: Result<B, E>): Result<C, E> =>\n  ar.ok === false ? ar :\n    br.ok === false ? br :\n      ok<C>(f(ar.result, br.result));\n\n/**\n * Apply `f` to the error of an `Err`, or pass the success through.\n */\nexport const mapError = <V, A, B>(f: (error: A) => B, r: Result<V, A>): Result<V, B> =>\n  r.ok === true ? r : err<B>(f(r.error));\n\n/**\n * Chain together a sequence of computations that may fail, similar to a\n * `Promise`. If the first computation fails then the error will propagate\n * through. If it succeeds, then `f` will be applied to the value, returning a\n * new `Result`.\n */\nexport const andThen = <A, B, E>(f: (value: A) => Result<B, E>, r: Result<A, E>): Result<B, E> =>\n  r.ok === true ? f(r.result) : r;\n","import * as Result from './result';\nconst isEqual = require('lodash.isequal'); // this syntax avoids TS1192\n\n/**\n * Information describing how json data failed to match a decoder.\n * Includes the full input json, since in most cases it's useless to know how a\n * decoder failed without also seeing the malformed data.\n */\nexport interface DecoderError {\n  kind: 'DecoderError';\n  input: unknown;\n  at: string;\n  message: string;\n}\n\n/**\n * Alias for the result of the `Decoder.run` method. On success returns `Ok`\n * with the decoded value of type `A`, on failure returns `Err` containing a\n * `DecoderError`.\n */\ntype RunResult<A> = Result.Result<A, DecoderError>;\n\n/**\n * Alias for the result of the internal `Decoder.decode` method. Since `decode`\n * is a private function it returns a partial decoder error on failure, which\n * will be completed and polished when handed off to the `run` method.\n */\ntype DecodeResult<A> = Result.Result<A, Partial<DecoderError>>;\n\n/**\n * Defines a mapped type over an interface `A`. `DecoderObject<A>` is an\n * interface that has all the keys or `A`, but each key's property type is\n * mapped to a decoder for that type. This type is used when creating decoders\n * for objects.\n *\n * Example:\n * ```\n * interface X {\n *   a: boolean;\n *   b: string;\n * }\n *\n * const decoderObject: DecoderObject<X> = {\n *   a: boolean(),\n *   b: string()\n * }\n * ```\n */\nexport type DecoderObject<A> = {[t in keyof A]: Decoder<A[t]>};\n\n/**\n * Type guard for `DecoderError`. One use case of the type guard is in the\n * `catch` of a promise. Typescript types the error argument of `catch` as\n * `any`, so when dealing with a decoder as a promise you may need to\n * distinguish between a `DecoderError` and an error string.\n */\nexport const isDecoderError = (a: any): a is DecoderError =>\n  a.kind === 'DecoderError' && typeof a.at === 'string' && typeof a.message === 'string';\n\n/*\n * Helpers\n */\nconst isJsonArray = (json: any): json is unknown[] => Array.isArray(json);\n\nconst isJsonObject = (json: any): json is Record<string, unknown> =>\n  typeof json === 'object' && json !== null && !isJsonArray(json);\n\nconst typeString = (json: unknown): string => {\n  switch (typeof json) {\n    case 'string':\n      return 'a string';\n    case 'number':\n      return 'a number';\n    case 'boolean':\n      return 'a boolean';\n    case 'undefined':\n      return 'undefined';\n    case 'object':\n      if (json instanceof Array) {\n        return 'an array';\n      } else if (json === null) {\n        return 'null';\n      } else {\n        return 'an object';\n      }\n    default:\n      return JSON.stringify(json);\n  }\n};\n\nconst expectedGot = (expected: string, got: unknown) =>\n  `expected ${expected}, got ${typeString(got)}`;\n\nconst printPath = (paths: (string | number)[]): string =>\n  paths.map(path => (typeof path === 'string' ? `.${path}` : `[${path}]`)).join('');\n\nconst prependAt = (newAt: string, {at, ...rest}: Partial<DecoderError>): Partial<DecoderError> => ({\n  at: newAt + (at || ''),\n  ...rest\n});\n\n/**\n * Decoders transform json objects with unknown structure into known and\n * verified forms. You can create objects of type `Decoder<A>` with either the\n * primitive decoder functions, such as `boolean()` and `string()`, or by\n * applying higher-order decoders to the primitives, such as `array(boolean())`\n * or `dict(string())`.\n *\n * Each of the decoder functions are available both as a static method on\n * `Decoder` and as a function alias -- for example the string decoder is\n * defined at `Decoder.string()`, but is also aliased to `string()`. Using the\n * function aliases exported with the library is recommended.\n *\n * `Decoder` exposes a number of 'run' methods, which all decode json in the\n * same way, but communicate success and failure in different ways. The `map`\n * and `andThen` methods modify decoders without having to call a 'run' method.\n *\n * Alternatively, the main decoder `run()` method returns an object of type\n * `Result<A, DecoderError>`. This library provides a number of helper\n * functions for dealing with the `Result` type, so you can do all the same\n * things with a `Result` as with the decoder methods.\n */\nexport class Decoder<A> {\n  /**\n   * The Decoder class constructor is kept private to separate the internal\n   * `decode` function from the external `run` function. The distinction\n   * between the two functions is that `decode` returns a\n   * `Partial<DecoderError>` on failure, which contains an unfinished error\n   * report. When `run` is called on a decoder, the relevant series of `decode`\n   * calls is made, and then on failure the resulting `Partial<DecoderError>`\n   * is turned into a `DecoderError` by filling in the missing information.\n   *\n   * While hiding the constructor may seem restrictive, leveraging the\n   * provided decoder combinators and helper functions such as\n   * `andThen` and `map` should be enough to build specialized decoders as\n   * needed.\n   */\n  private constructor(private decode: (json: unknown) => DecodeResult<A>) {}\n\n  /**\n   * Decoder primitive that validates strings, and fails on all other input.\n   */\n  static string(): Decoder<string> {\n    return new Decoder<string>(\n      (json: unknown) =>\n        typeof json === 'string'\n          ? Result.ok(json)\n          : Result.err({message: expectedGot('a string', json)})\n    );\n  }\n\n  /**\n   * Decoder primitive that validates numbers, and fails on all other input.\n   */\n  static number(): Decoder<number> {\n    return new Decoder<number>(\n      (json: unknown) =>\n        typeof json === 'number'\n          ? Result.ok(json)\n          : Result.err({message: expectedGot('a number', json)})\n    );\n  }\n\n  /**\n   * Decoder primitive that validates booleans, and fails on all other input.\n   */\n  static boolean(): Decoder<boolean> {\n    return new Decoder<boolean>(\n      (json: unknown) =>\n        typeof json === 'boolean'\n          ? Result.ok(json)\n          : Result.err({message: expectedGot('a boolean', json)})\n    );\n  }\n\n  /**\n   * Escape hatch to bypass validation. Always succeeds and types the result as\n   * `any`. Useful for defining decoders incrementally, particularly for\n   * complex objects.\n   *\n   * Example:\n   * ```\n   * interface User {\n   *   name: string;\n   *   complexUserData: ComplexType;\n   * }\n   *\n   * const userDecoder: Decoder<User> = object({\n   *   name: string(),\n   *   complexUserData: anyJson()\n   * });\n   * ```\n   */\n  static anyJson = (): Decoder<any> => new Decoder<any>((json: any) => Result.ok(json));\n\n  /**\n   * Decoder identity function which always succeeds and types the result as\n   * `unknown`.\n   */\n  static unknownJson = (): Decoder<unknown> =>\n    new Decoder<unknown>((json: unknown) => Result.ok(json));\n\n  /**\n   * Decoder primitive that only matches on exact values.\n   *\n   * Note that `constant('string to match')` returns a `Decoder<string>` which\n   * fails if the input is not equal to `'string to match'`. In many cases this\n   * is sufficient, but in some situations typescript requires that the decoder\n   * type be a type-literal. In such a case you must provide the type parameter,\n   * which looks like `constant<'string to match'>('string to match')`.\n   *\n   * Providing the type parameter is only necessary for type-literal strings\n   * and numbers, as detailed by this table:\n   *\n   * ```\n   *  | Decoder                      | Type                 |\n   *  | ---------------------------- | ---------------------|\n   *  | constant(true)               | Decoder<true>        |\n   *  | constant(false)              | Decoder<false>       |\n   *  | constant(null)               | Decoder<null>        |\n   *  | constant('alaska')           | Decoder<string>      |\n   *  | constant<'alaska'>('alaska') | Decoder<'alaska'>    |\n   *  | constant(50)                 | Decoder<number>      |\n   *  | constant<50>(50)             | Decoder<50>          |\n   *  | constant([1,2,3])            | Decoder<number[]>    |\n   *  | constant<[1,2,3]>([1,2,3])   | Decoder<[1,2,3]>     |\n   *  | constant({x: 't'})           | Decoder<{x: string}> |\n   *  | constant<{x: 't'}>({x: 't'}) | Decoder<{x: 't'}>    |\n   * ```\n   *\n   *\n   * One place where this happens is when a type-literal is in an interface:\n   * ```\n   * interface Bear {\n   *   kind: 'bear';\n   *   isBig: boolean;\n   * }\n   *\n   * const bearDecoder1: Decoder<Bear> = object({\n   *   kind: constant('bear'),\n   *   isBig: boolean()\n   * });\n   * // Type 'Decoder<{ kind: string; isBig: boolean; }>' is not assignable to\n   * // type 'Decoder<Bear>'. Type 'string' is not assignable to type '\"bear\"'.\n   *\n   * const bearDecoder2: Decoder<Bear> = object({\n   *   kind: constant<'bear'>('bear'),\n   *   isBig: boolean()\n   * });\n   * // no compiler errors\n   * ```\n   *\n   * Another is in type-literal unions:\n   * ```\n   * type animal = 'bird' | 'bear';\n   *\n   * const animalDecoder1: Decoder<animal> = union(\n   *   constant('bird'),\n   *   constant('bear')\n   * );\n   * // Type 'Decoder<string>' is not assignable to type 'Decoder<animal>'.\n   * // Type 'string' is not assignable to type 'animal'.\n   *\n   * const animalDecoder2: Decoder<animal> = union(\n   *   constant<'bird'>('bird'),\n   *   constant<'bear'>('bear')\n   * );\n   * // no compiler errors\n   * ```\n   */\n  static constant(value: true): Decoder<true>;\n  static constant(value: false): Decoder<false>;\n  static constant<A>(value: A): Decoder<A>;\n  static constant(value: any): Decoder<any> {\n    return new Decoder(\n      (json: unknown) =>\n        isEqual(json, value)\n          ? Result.ok(value)\n          : Result.err({message: `expected ${JSON.stringify(value)}, got ${JSON.stringify(json)}`})\n    );\n  }\n\n  /**\n   * An higher-order decoder that runs decoders on specified fields of an object,\n   * and returns a new object with those fields. If `object` is called with no\n   * arguments, then the outer object part of the json is validated but not the\n   * contents, typing the result as a record where all keys have a value of\n   * type `unknown`.\n   *\n   * The `optional` and `constant` decoders are particularly useful for decoding\n   * objects that match typescript interfaces.\n   *\n   * To decode a single field that is inside of an object see `valueAt`.\n   *\n   * Example:\n   * ```\n   * object({x: number(), y: number()}).run({x: 5, y: 10})\n   * // => {ok: true, result: {x: 5, y: 10}}\n   *\n   * object().map(Object.keys).run({n: 1, i: [], c: {}, e: 'e'})\n   * // => {ok: true, result: ['n', 'i', 'c', 'e']}\n   * ```\n   */\n  static object(): Decoder<Record<string, unknown>>;\n  static object<A>(decoders: DecoderObject<A>): Decoder<A>;\n  static object<A>(decoders?: DecoderObject<A>) {\n    return new Decoder((json: unknown) => {\n      if (isJsonObject(json) && decoders) {\n        let obj: any = {};\n        for (const key in decoders) {\n          if (decoders.hasOwnProperty(key)) {\n            const r = decoders[key].decode(json[key]);\n            if (r.ok === true) {\n              // tslint:disable-next-line:strict-type-predicates\n              if (r.result !== undefined) {\n                obj[key] = r.result;\n              }\n            } else if (json[key] === undefined) {\n              return Result.err({message: `the key '${key}' is required but was not present`});\n            } else {\n              return Result.err(prependAt(`.${key}`, r.error));\n            }\n          }\n        }\n        return Result.ok(obj);\n      } else if (isJsonObject(json)) {\n        return Result.ok(json);\n      } else {\n        return Result.err({message: expectedGot('an object', json)});\n      }\n    });\n  }\n\n  /**\n   * Decoder for json arrays. Runs `decoder` on each array element, and succeeds\n   * if all elements are successfully decoded. If no `decoder` argument is\n   * provided then the outer array part of the json is validated but not the\n   * contents, typing the result as `unknown[]`.\n   *\n   * To decode a single value that is inside of an array see `valueAt`.\n   *\n   * Examples:\n   * ```\n   * array(number()).run([1, 2, 3])\n   * // => {ok: true, result: [1, 2, 3]}\n   *\n   * array(array(boolean())).run([[true], [], [true, false, false]])\n   * // => {ok: true, result: [[true], [], [true, false, false]]}\n   *\n   *\n   * const validNumbersDecoder = array()\n   *   .map((arr: unknown[]) => arr.map(number().run))\n   *   .map(Result.successes)\n   *\n   * validNumbersDecoder.run([1, true, 2, 3, 'five', 4, []])\n   * // {ok: true, result: [1, 2, 3, 4]}\n   *\n   * validNumbersDecoder.run([false, 'hi', {}])\n   * // {ok: true, result: []}\n   *\n   * validNumbersDecoder.run(false)\n   * // {ok: false, error: {..., message: \"expected an array, got a boolean\"}}\n   * ```\n   */\n  static array(): Decoder<unknown[]>;\n  static array<A>(decoder: Decoder<A>): Decoder<A[]>;\n  static array<A>(decoder?: Decoder<A>) {\n    return new Decoder(json => {\n      if (isJsonArray(json) && decoder) {\n        const decodeValue = (v: unknown, i: number): DecodeResult<A> =>\n          Result.mapError(err => prependAt(`[${i}]`, err), decoder.decode(v));\n\n        return json.reduce(\n          (acc: DecodeResult<A[]>, v: unknown, i: number) =>\n            Result.map2((arr, result) => [...arr, result], acc, decodeValue(v, i)),\n          Result.ok([])\n        );\n      } else if (isJsonArray(json)) {\n        return Result.ok(json);\n      } else {\n        return Result.err({message: expectedGot('an array', json)});\n      }\n    });\n  }\n\n  /**\n   * Decoder for fixed-length arrays, aka Tuples.\n   *\n   * Supports up to 8-tuples.\n   *\n   * Example:\n   * ```\n   * tuple([number(), number(), string()]).run([5, 10, 'px'])\n   * // => {ok: true, result: [5, 10, 'px']}\n   * ```\n   */\n  static tuple<A>(decoder: [Decoder<A>]): Decoder<[A]>;\n  static tuple<A, B>(decoder: [Decoder<A>, Decoder<B>]): Decoder<[A, B]>;\n  static tuple<A, B, C>(decoder: [Decoder<A>, Decoder<B>, Decoder<C>]): Decoder<[A, B, C]>;\n  static tuple<A, B, C, D>(decoder: [Decoder<A>, Decoder<B>, Decoder<C>, Decoder<D>]): Decoder<[A, B, C, D]>; // prettier-ignore\n  static tuple<A, B, C, D, E>(decoder: [Decoder<A>, Decoder<B>, Decoder<C>, Decoder<D>, Decoder<E>]): Decoder<[A, B, C, D, E]>; // prettier-ignore\n  static tuple<A, B, C, D, E, F>(decoder: [Decoder<A>, Decoder<B>, Decoder<C>, Decoder<D>, Decoder<E>, Decoder<F>]): Decoder<[A, B, C, D, E, F]>; // prettier-ignore\n  static tuple<A, B, C, D, E, F, G>(decoder: [Decoder<A>, Decoder<B>, Decoder<C>, Decoder<D>, Decoder<E>, Decoder<F>, Decoder<G>]): Decoder<[A, B, C, D, E, F, G]>; // prettier-ignore\n  static tuple<A, B, C, D, E, F, G, H>(decoder: [Decoder<A>, Decoder<B>, Decoder<C>, Decoder<D>, Decoder<E>, Decoder<F>, Decoder<G>, Decoder<H>]): Decoder<[A, B, C, D, E, F, G, H]>; // prettier-ignore\n  static tuple<A>(decoders: Decoder<A>[]) {\n    return new Decoder((json: unknown) => {\n      if (isJsonArray(json)) {\n        if (json.length !== decoders.length) {\n          return Result.err({\n            message: `expected a tuple of length ${decoders.length}, got one of length ${\n              json.length\n            }`\n          });\n        }\n        const result = [];\n        for (let i: number = 0; i < decoders.length; i++) {\n          const nth = decoders[i].decode(json[i]);\n          if (nth.ok) {\n            result[i] = nth.result;\n          } else {\n            return Result.err(prependAt(`[${i}]`, nth.error));\n          }\n        }\n        return Result.ok(result);\n      } else {\n        return Result.err({message: expectedGot(`a tuple of length ${decoders.length}`, json)});\n      }\n    });\n  }\n\n  /**\n   * Decoder for json objects where the keys are unknown strings, but the values\n   * should all be of the same type.\n   *\n   * Example:\n   * ```\n   * dict(number()).run({chocolate: 12, vanilla: 10, mint: 37});\n   * // => {ok: true, result: {chocolate: 12, vanilla: 10, mint: 37}}\n   * ```\n   */\n  static dict = <A>(decoder: Decoder<A>): Decoder<Record<string, A>> =>\n    new Decoder(json => {\n      if (isJsonObject(json)) {\n        let obj: Record<string, A> = {};\n        for (const key in json) {\n          if (json.hasOwnProperty(key)) {\n            const r = decoder.decode(json[key]);\n            if (r.ok === true) {\n              obj[key] = r.result;\n            } else {\n              return Result.err(prependAt(`.${key}`, r.error));\n            }\n          }\n        }\n        return Result.ok(obj);\n      } else {\n        return Result.err({message: expectedGot('an object', json)});\n      }\n    });\n\n  /**\n   * Decoder for values that may be `undefined`. This is primarily helpful for\n   * decoding interfaces with optional fields.\n   *\n   * Example:\n   * ```\n   * interface User {\n   *   id: number;\n   *   isOwner?: boolean;\n   * }\n   *\n   * const decoder: Decoder<User> = object({\n   *   id: number(),\n   *   isOwner: optional(boolean())\n   * });\n   * ```\n   */\n  static optional = <A>(decoder: Decoder<A>): Decoder<undefined | A> =>\n    new Decoder<undefined | A>(\n      (json: unknown) => (json === undefined ? Result.ok(undefined) : decoder.decode(json))\n    );\n\n  /**\n   * Decoder that attempts to run each decoder in `decoders` and either succeeds\n   * with the first successful decoder, or fails after all decoders have failed.\n   *\n   * Note that `oneOf` expects the decoders to all have the same return type,\n   * while `union` creates a decoder for the union type of all the input\n   * decoders.\n   *\n   * Examples:\n   * ```\n   * oneOf(string(), number().map(String))\n   * oneOf(constant('start'), constant('stop'), succeed('unknown'))\n   * ```\n   */\n  static oneOf = <A>(...decoders: Decoder<A>[]): Decoder<A> =>\n    new Decoder<A>((json: unknown) => {\n      const errors: Partial<DecoderError>[] = [];\n      for (let i: number = 0; i < decoders.length; i++) {\n        const r = decoders[i].decode(json);\n        if (r.ok === true) {\n          return r;\n        } else {\n          errors[i] = r.error;\n        }\n      }\n      const errorsList = errors\n        .map(error => `at error${error.at || ''}: ${error.message}`)\n        .join('\", \"');\n      return Result.err({\n        message: `expected a value matching one of the decoders, got the errors [\"${errorsList}\"]`\n      });\n    });\n\n  /**\n   * Combines 2-8 decoders of disparate types into a decoder for the union of all\n   * the types.\n   *\n   * If you need more than 8 variants for your union, it's possible to use\n   * `oneOf` in place of `union` as long as you annotate every decoder with the\n   * union type.\n   *\n   * Example:\n   * ```\n   * type C = {a: string} | {b: number};\n   *\n   * const unionDecoder: Decoder<C> = union(object({a: string()}), object({b: number()}));\n   * const oneOfDecoder: Decoder<C> = oneOf(object<C>({a: string()}), object<C>({b: number()}));\n   * ```\n   */\n  static union <A, B>(ad: Decoder<A>, bd: Decoder<B>): Decoder<A | B>; // prettier-ignore\n  static union <A, B, C>(ad: Decoder<A>, bd: Decoder<B>, cd: Decoder<C>): Decoder<A | B | C>; // prettier-ignore\n  static union <A, B, C, D>(ad: Decoder<A>, bd: Decoder<B>, cd: Decoder<C>, dd: Decoder<D>): Decoder<A | B | C | D>; // prettier-ignore\n  static union <A, B, C, D, E>(ad: Decoder<A>, bd: Decoder<B>, cd: Decoder<C>, dd: Decoder<D>, ed: Decoder<E>): Decoder<A | B | C | D | E>; // prettier-ignore\n  static union <A, B, C, D, E, F>(ad: Decoder<A>, bd: Decoder<B>, cd: Decoder<C>, dd: Decoder<D>, ed: Decoder<E>, fd: Decoder<F>): Decoder<A | B | C | D | E | F>; // prettier-ignore\n  static union <A, B, C, D, E, F, G>(ad: Decoder<A>, bd: Decoder<B>, cd: Decoder<C>, dd: Decoder<D>, ed: Decoder<E>, fd: Decoder<F>, gd: Decoder<G>): Decoder<A | B | C | D | E | F | G>; // prettier-ignore\n  static union <A, B, C, D, E, F, G, H>(ad: Decoder<A>, bd: Decoder<B>, cd: Decoder<C>, dd: Decoder<D>, ed: Decoder<E>, fd: Decoder<F>, gd: Decoder<G>, hd: Decoder<H>): Decoder<A | B | C | D | E | F | G | H>; // prettier-ignore\n  static union(ad: Decoder<any>, bd: Decoder<any>, ...decoders: Decoder<any>[]): Decoder<any> {\n    return Decoder.oneOf(ad, bd, ...decoders);\n  }\n\n  /**\n   * Combines 2-8 object decoders into a decoder for the intersection of all the objects.\n   *\n   * Example:\n   * ```\n   * interface Pet {\n   *   name: string;\n   *   maxLegs: number;\n   * }\n   *\n   * interface Cat extends Pet {\n   *   evil: boolean;\n   * }\n   *\n   * const petDecoder: Decoder<Pet> = object({name: string(), maxLegs: number()});\n   * const catDecoder: Decoder<Cat> = intersection(petDecoder, object({evil: boolean()}));\n   * ```\n   */\n  static intersection <A, B>(ad: Decoder<A>, bd: Decoder<B>): Decoder<A & B>; // prettier-ignore\n  static intersection <A, B, C>(ad: Decoder<A>, bd: Decoder<B>, cd: Decoder<C>): Decoder<A & B & C>; // prettier-ignore\n  static intersection <A, B, C, D>(ad: Decoder<A>, bd: Decoder<B>, cd: Decoder<C>, dd: Decoder<D>): Decoder<A & B & C & D>; // prettier-ignore\n  static intersection <A, B, C, D, E>(ad: Decoder<A>, bd: Decoder<B>, cd: Decoder<C>, dd: Decoder<D>, ed: Decoder<E>): Decoder<A & B & C & D & E>; // prettier-ignore\n  static intersection <A, B, C, D, E, F>(ad: Decoder<A>, bd: Decoder<B>, cd: Decoder<C>, dd: Decoder<D>, ed: Decoder<E>, fd: Decoder<F>): Decoder<A & B & C & D & E & F>; // prettier-ignore\n  static intersection <A, B, C, D, E, F, G>(ad: Decoder<A>, bd: Decoder<B>, cd: Decoder<C>, dd: Decoder<D>, ed: Decoder<E>, fd: Decoder<F>, gd: Decoder<G>): Decoder<A & B & C & D & E & F & G>; // prettier-ignore\n  static intersection <A, B, C, D, E, F, G, H>(ad: Decoder<A>, bd: Decoder<B>, cd: Decoder<C>, dd: Decoder<D>, ed: Decoder<E>, fd: Decoder<F>, gd: Decoder<G>, hd: Decoder<H>): Decoder<A & B & C & D & E & F & G & H>; // prettier-ignore\n  static intersection(ad: Decoder<any>, bd: Decoder<any>, ...ds: Decoder<any>[]): Decoder<any> {\n    return new Decoder((json: unknown) =>\n      [ad, bd, ...ds].reduce(\n        (acc: DecodeResult<any>, decoder) => Result.map2(Object.assign, acc, decoder.decode(json)),\n        Result.ok({})\n      )\n    );\n  }\n\n  /**\n   * Decoder that always succeeds with either the decoded value, or a fallback\n   * default value.\n   */\n  static withDefault = <A>(defaultValue: A, decoder: Decoder<A>): Decoder<A> =>\n    new Decoder<A>((json: unknown) =>\n      Result.ok(Result.withDefault(defaultValue, decoder.decode(json)))\n    );\n\n  /**\n   * Decoder that pulls a specific field out of a json structure, instead of\n   * decoding and returning the full structure. The `paths` array describes the\n   * object keys and array indices to traverse, so that values can be pulled out\n   * of a nested structure.\n   *\n   * Example:\n   * ```\n   * const decoder = valueAt(['a', 'b', 0], string());\n   *\n   * decoder.run({a: {b: ['surprise!']}})\n   * // => {ok: true, result: 'surprise!'}\n   *\n   * decoder.run({a: {x: 'cats'}})\n   * // => {ok: false, error: {... at: 'input.a.b[0]' message: 'path does not exist'}}\n   * ```\n   *\n   * Note that the `decoder` is ran on the value found at the last key in the\n   * path, even if the last key is not found. This allows the `optional`\n   * decoder to succeed when appropriate.\n   * ```\n   * const optionalDecoder = valueAt(['a', 'b', 'c'], optional(string()));\n   *\n   * optionalDecoder.run({a: {b: {c: 'surprise!'}}})\n   * // => {ok: true, result: 'surprise!'}\n   *\n   * optionalDecoder.run({a: {b: 'cats'}})\n   * // => {ok: false, error: {... at: 'input.a.b.c' message: 'expected an object, got \"cats\"'}\n   *\n   * optionalDecoder.run({a: {b: {z: 1}}})\n   * // => {ok: true, result: undefined}\n   * ```\n   */\n  static valueAt = <A>(paths: (string | number)[], decoder: Decoder<A>): Decoder<A> =>\n    new Decoder<A>((json: unknown) => {\n      let jsonAtPath: any = json;\n      for (let i: number = 0; i < paths.length; i++) {\n        if (jsonAtPath === undefined) {\n          return Result.err({\n            at: printPath(paths.slice(0, i + 1)),\n            message: 'path does not exist'\n          });\n        } else if (typeof paths[i] === 'string' && !isJsonObject(jsonAtPath)) {\n          return Result.err({\n            at: printPath(paths.slice(0, i + 1)),\n            message: expectedGot('an object', jsonAtPath)\n          });\n        } else if (typeof paths[i] === 'number' && !isJsonArray(jsonAtPath)) {\n          return Result.err({\n            at: printPath(paths.slice(0, i + 1)),\n            message: expectedGot('an array', jsonAtPath)\n          });\n        } else {\n          jsonAtPath = jsonAtPath[paths[i]];\n        }\n      }\n      return Result.mapError(\n        error =>\n          jsonAtPath === undefined\n            ? {at: printPath(paths), message: 'path does not exist'}\n            : prependAt(printPath(paths), error),\n        decoder.decode(jsonAtPath)\n      );\n    });\n\n  /**\n   * Decoder that ignores the input json and always succeeds with `fixedValue`.\n   */\n  static succeed = <A>(fixedValue: A): Decoder<A> =>\n    new Decoder<A>((json: unknown) => Result.ok(fixedValue));\n\n  /**\n   * Decoder that ignores the input json and always fails with `errorMessage`.\n   */\n  static fail = <A>(errorMessage: string): Decoder<A> =>\n    new Decoder<A>((json: unknown) => Result.err({message: errorMessage}));\n\n  /**\n   * Decoder that allows for validating recursive data structures. Unlike with\n   * functions, decoders assigned to variables can't reference themselves\n   * before they are fully defined. We can avoid prematurely referencing the\n   * decoder by wrapping it in a function that won't be called until use, at\n   * which point the decoder has been defined.\n   *\n   * Example:\n   * ```\n   * interface Comment {\n   *   msg: string;\n   *   replies: Comment[];\n   * }\n   *\n   * const decoder: Decoder<Comment> = object({\n   *   msg: string(),\n   *   replies: lazy(() => array(decoder))\n   * });\n   * ```\n   */\n  static lazy = <A>(mkDecoder: () => Decoder<A>): Decoder<A> =>\n    new Decoder((json: unknown) => mkDecoder().decode(json));\n\n  /**\n   * Run the decoder and return a `Result` with either the decoded value or a\n   * `DecoderError` containing the json input, the location of the error, and\n   * the error message.\n   *\n   * Examples:\n   * ```\n   * number().run(12)\n   * // => {ok: true, result: 12}\n   *\n   * string().run(9001)\n   * // =>\n   * // {\n   * //   ok: false,\n   * //   error: {\n   * //     kind: 'DecoderError',\n   * //     input: 9001,\n   * //     at: 'input',\n   * //     message: 'expected a string, got 9001'\n   * //   }\n   * // }\n   * ```\n   */\n  run = (json: unknown): RunResult<A> =>\n    Result.mapError(\n      error => ({\n        kind: 'DecoderError' as 'DecoderError',\n        input: json,\n        at: 'input' + (error.at || ''),\n        message: error.message || ''\n      }),\n      this.decode(json)\n    );\n\n  /**\n   * Run the decoder as a `Promise`.\n   */\n  runPromise = (json: unknown): Promise<A> => Result.asPromise(this.run(json));\n\n  /**\n   * Run the decoder and return the value on success, or throw an exception\n   * with a formatted error string.\n   */\n  runWithException = (json: unknown): A => Result.withException(this.run(json));\n\n  /**\n   * Construct a new decoder that applies a transformation to the decoded\n   * result. If the decoder succeeds then `f` will be applied to the value. If\n   * it fails the error will propagated through.\n   *\n   * Example:\n   * ```\n   * number().map(x => x * 5).run(10)\n   * // => {ok: true, result: 50}\n   * ```\n   */\n  map = <B>(f: (value: A) => B): Decoder<B> =>\n    new Decoder<B>((json: unknown) => Result.map(f, this.decode(json)));\n\n  /**\n   * Chain together a sequence of decoders. The first decoder will run, and\n   * then the function will determine what decoder to run second. If the result\n   * of the first decoder succeeds then `f` will be applied to the decoded\n   * value. If it fails the error will propagate through.\n   *\n   * This is a very powerful method -- it can act as both the `map` and `where`\n   * methods, can improve error messages for edge cases, and can be used to\n   * make a decoder for custom types.\n   *\n   * Example of adding an error message:\n   * ```\n   * const versionDecoder = valueAt(['version'], number());\n   * const infoDecoder3 = object({a: boolean()});\n   *\n   * const decoder = versionDecoder.andThen(version => {\n   *   switch (version) {\n   *     case 3:\n   *       return infoDecoder3;\n   *     default:\n   *       return fail(`Unable to decode info, version ${version} is not supported.`);\n   *   }\n   * });\n   *\n   * decoder.run({version: 3, a: true})\n   * // => {ok: true, result: {a: true}}\n   *\n   * decoder.run({version: 5, x: 'abc'})\n   * // =>\n   * // {\n   * //   ok: false,\n   * //   error: {... message: 'Unable to decode info, version 5 is not supported.'}\n   * // }\n   * ```\n   *\n   * Example of decoding a custom type:\n   * ```\n   * // nominal type for arrays with a length of at least one\n   * type NonEmptyArray<T> = T[] & { __nonEmptyArrayBrand__: void };\n   *\n   * const nonEmptyArrayDecoder = <T>(values: Decoder<T>): Decoder<NonEmptyArray<T>> =>\n   *   array(values).andThen(arr =>\n   *     arr.length > 0\n   *       ? succeed(createNonEmptyArray(arr))\n   *       : fail(`expected a non-empty array, got an empty array`)\n   *   );\n   * ```\n   */\n  andThen = <B>(f: (value: A) => Decoder<B>): Decoder<B> =>\n    new Decoder<B>((json: unknown) =>\n      Result.andThen(value => f(value).decode(json), this.decode(json))\n    );\n\n  /**\n   * Add constraints to a decoder _without_ changing the resulting type. The\n   * `test` argument is a predicate function which returns true for valid\n   * inputs. When `test` fails on an input, the decoder fails with the given\n   * `errorMessage`.\n   *\n   * ```\n   * const chars = (length: number): Decoder<string> =>\n   *   string().where(\n   *     (s: string) => s.length === length,\n   *     `expected a string of length ${length}`\n   *   );\n   *\n   * chars(5).run('12345')\n   * // => {ok: true, result: '12345'}\n   *\n   * chars(2).run('HELLO')\n   * // => {ok: false, error: {... message: 'expected a string of length 2'}}\n   *\n   * chars(12).run(true)\n   * // => {ok: false, error: {... message: 'expected a string, got a boolean'}}\n   * ```\n   */\n  where = (test: (value: A) => boolean, errorMessage: string): Decoder<A> =>\n    this.andThen((value: A) => (test(value) ? Decoder.succeed(value) : Decoder.fail(errorMessage)));\n}\n","import {Decoder} from './decoder';\n\n/* tslint:disable:variable-name */\n\n/** See `Decoder.string` */\nexport const string = Decoder.string;\n\n/** See `Decoder.number` */\nexport const number = Decoder.number;\n\n/** See `Decoder.boolean` */\nexport const boolean = Decoder.boolean;\n\n/** See `Decoder.anyJson` */\nexport const anyJson = Decoder.anyJson;\n\n/** See `Decoder.unknownJson` */\nexport const unknownJson: () => Decoder<unknown> = Decoder.unknownJson;\n\n/** See `Decoder.constant` */\nexport const constant = Decoder.constant;\n\n/** See `Decoder.object` */\nexport const object = Decoder.object;\n\n/** See `Decoder.array` */\nexport const array = Decoder.array;\n\n/** See `Decoder.tuple` */\nexport const tuple = Decoder.tuple;\n\n/** See `Decoder.dict` */\nexport const dict = Decoder.dict;\n\n/** See `Decoder.optional` */\nexport const optional = Decoder.optional;\n\n/** See `Decoder.oneOf` */\nexport const oneOf = Decoder.oneOf;\n\n/** See `Decoder.union` */\nexport const union = Decoder.union;\n\n/** See `Decoder.intersection` */\nexport const intersection = Decoder.intersection;\n\n/** See `Decoder.withDefault` */\nexport const withDefault = Decoder.withDefault;\n\n/** See `Decoder.valueAt` */\nexport const valueAt = Decoder.valueAt;\n\n/** See `Decoder.succeed` */\nexport const succeed = Decoder.succeed;\n\n/** See `Decoder.fail` */\nexport const fail = Decoder.fail;\n\n/** See `Decoder.lazy` */\nexport const lazy = Decoder.lazy;\n"],"names":["Result.mapError","Result.asPromise","Result.withException","Result.map","Result.andThen","Result.ok","Result.err","err","Result.map2","Result.withDefault","withDefault"],"mappings":"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"}