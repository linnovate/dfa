{"ast":null,"code":"var _jsxFileName = \"/Users/liorkesos/projects/daml/create-daml-app/ui/src/components/LoginScreen.tsx\",\n    _s = $RefreshSig$();\n\n// Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback } from 'react';\nimport { Button, Form, Grid, Header, Image, Segment } from 'semantic-ui-react';\nimport { computeCredentials } from '../Credentials';\nimport Ledger from '@daml/ledger';\nimport { User } from '@daml.js/create-daml-app';\nimport { DeploymentMode, deploymentMode, ledgerId, httpBaseUrl } from '../config';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n/**\n * React component for the login screen of the `App`.\n */\nconst LoginScreen = ({\n  onLogin\n}) => {\n  _s();\n\n  const [username, setUsername] = React.useState('');\n  const login = useCallback(async credentials => {\n    try {\n      const ledger = new Ledger({\n        token: credentials.token,\n        httpBaseUrl\n      });\n      let userContract = await ledger.fetchByKey(User.User, credentials.party);\n\n      if (userContract === null) {\n        const user = {\n          username: credentials.party,\n          following: []\n        };\n        userContract = await ledger.create(User.User, user);\n      }\n\n      onLogin(credentials);\n    } catch (error) {\n      alert(`Unknown error:\\n${error}`);\n    }\n  }, [onLogin]);\n\n  const handleLogin = async event => {\n    event.preventDefault();\n    const credentials = computeCredentials(username);\n    await login(credentials);\n  };\n\n  const handleDablLogin = () => {\n    window.location.assign(`https://login.projectdabl.com/auth/login?ledgerId=${ledgerId}`);\n  };\n\n  useEffect(() => {\n    const url = new URL(window.location.toString());\n    const token = url.searchParams.get('token');\n\n    if (token === null) {\n      return;\n    }\n\n    const party = url.searchParams.get('party');\n\n    if (party === null) {\n      throw Error(\"When 'token' is passed via URL, 'party' must be passed too.\");\n    }\n\n    url.search = '';\n    window.history.replaceState(window.history.state, '', url.toString());\n    login({\n      token,\n      party,\n      ledgerId\n    });\n  }, [login]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    textAlign: \"center\",\n    style: {\n      height: '100vh'\n    },\n    verticalAlign: \"middle\",\n    children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n      style: {\n        maxWidth: 450\n      },\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        as: \"h1\",\n        textAlign: \"center\",\n        size: \"huge\",\n        style: {\n          color: '#223668'\n        },\n        children: /*#__PURE__*/_jsxDEV(Header.Content, {\n          children: [\"Create\", /*#__PURE__*/_jsxDEV(Image, {\n            as: \"a\",\n            href: \"https://www.daml.com/\",\n            target: \"_blank\",\n            src: \"/daml.svg\",\n            alt: \"Daml Logo\",\n            spaced: true,\n            size: \"small\",\n            verticalAlign: \"bottom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), \"App\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        size: \"large\",\n        className: \"test-select-login-screen\",\n        children: /*#__PURE__*/_jsxDEV(Segment, {\n          children: deploymentMode !== DeploymentMode.PROD_DABL ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n              fluid: true,\n              icon: \"user\",\n              iconPosition: \"left\",\n              placeholder: \"Username\",\n              value: username,\n              className: \"test-select-username-field\",\n              onChange: e => setUsername(e.currentTarget.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              primary: true,\n              fluid: true,\n              className: \"test-select-login-button\",\n              onClick: handleLogin,\n              children: \"Log in\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n            primary: true,\n            fluid: true,\n            onClick: handleDablLogin,\n            children: \"Log in with DABL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoginScreen, \"Lj55TNMBkeORgYkCTNoDjMWCu1U=\");\n\n_c = LoginScreen;\nexport default LoginScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginScreen\");","map":{"version":3,"sources":["/Users/liorkesos/projects/daml/create-daml-app/ui/src/components/LoginScreen.tsx"],"names":["React","useCallback","Button","Form","Grid","Header","Image","Segment","computeCredentials","Ledger","User","DeploymentMode","deploymentMode","ledgerId","httpBaseUrl","useEffect","LoginScreen","onLogin","username","setUsername","useState","login","credentials","ledger","token","userContract","fetchByKey","party","user","following","create","error","alert","handleLogin","event","preventDefault","handleDablLogin","window","location","assign","url","URL","toString","searchParams","get","Error","search","history","replaceState","state","height","maxWidth","color","PROD_DABL","e","currentTarget","value"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useCallback } from 'react'\nimport { Button, Form, Grid, Header, Image, Segment } from 'semantic-ui-react'\nimport Credentials, { computeCredentials } from '../Credentials';\nimport Ledger from '@daml/ledger';\nimport { User } from '@daml.js/create-daml-app';\nimport { DeploymentMode, deploymentMode, ledgerId, httpBaseUrl} from '../config';\nimport { useEffect } from 'react';\n\ntype Props = {\n  onLogin: (credentials: Credentials) => void;\n}\n\n/**\n * React component for the login screen of the `App`.\n */\nconst LoginScreen: React.FC<Props> = ({onLogin}) => {\n  const [username, setUsername] = React.useState('');\n\n  const login = useCallback(async (credentials: Credentials) => {\n    try {\n      const ledger = new Ledger({token: credentials.token, httpBaseUrl});\n      let userContract = await ledger.fetchByKey(User.User, credentials.party);\n      if (userContract === null) {\n        const user = {username: credentials.party, following: []};\n        userContract = await ledger.create(User.User, user);\n      }\n      onLogin(credentials);\n    } catch(error) {\n      alert(`Unknown error:\\n${error}`);\n    }\n  }, [onLogin]);\n\n  const handleLogin = async (event: React.FormEvent) => {\n    event.preventDefault();\n    const credentials = computeCredentials(username);\n    await login(credentials);\n  }\n\n  const handleDablLogin = () => {\n    window.location.assign(`https://login.projectdabl.com/auth/login?ledgerId=${ledgerId}`);\n  }\n\n  useEffect(() => {\n    const url = new URL(window.location.toString());\n    const token = url.searchParams.get('token');\n    if (token === null) {\n      return;\n    }\n    const party = url.searchParams.get('party');\n    if (party === null) {\n      throw Error(\"When 'token' is passed via URL, 'party' must be passed too.\");\n    }\n    url.search = '';\n    window.history.replaceState(window.history.state, '', url.toString());\n    login({token, party, ledgerId});\n  }, [login]);\n\n  return (\n    <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as='h1' textAlign='center' size='huge' style={{color: '#223668'}}>\n          <Header.Content>\n            Create\n            <Image\n              as='a'\n              href='https://www.daml.com/'\n              target='_blank'\n              src='/daml.svg'\n              alt='Daml Logo'\n              spaced\n              size='small'\n              verticalAlign='bottom'\n            />\n            App\n          </Header.Content>\n        </Header>\n        <Form size='large' className='test-select-login-screen'>\n          <Segment>\n            {deploymentMode !== DeploymentMode.PROD_DABL\n            ? <>\n                {/* FORM_BEGIN */}\n                <Form.Input\n                  fluid\n                  icon='user'\n                  iconPosition='left'\n                  placeholder='Username'\n                  value={username}\n                  className='test-select-username-field'\n                  onChange={e => setUsername(e.currentTarget.value)}\n                />\n                <Button\n                  primary\n                  fluid\n                  className='test-select-login-button'\n                  onClick={handleLogin}>\n                  Log in\n                </Button>\n                {/* FORM_END */}\n              </>\n            : <Button primary fluid onClick={handleDablLogin}>\n                Log in with DABL\n              </Button>\n            }\n          </Segment>\n        </Form>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default LoginScreen;\n"]},"metadata":{},"sourceType":"module"}