-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module User where

--Attribute decleration
type Key = (Party, Text)

data Flight = Flight {
  lat : Text,
  lng : Text,
  time : Text;
  altitude : Text
} deriving (Eq, Show)

getFlightContent: Flight -> Text
getFlightContent flightContent = flightContent.lat <> ", " <> flightContent.lng <> ", " <> flightContent.time <> ", " <> flightContent.altitude


{-
FlightRequest:
Signatory: User
Observers: Admin, Acceptors
Data: FlightData

preconsuing choice Accept
preconsuming choice Dissproved
-}

template FlightRequest with
    user: Party
    admin: Party
    parties: [Party]
    approvers: [Party]
    disapprovers: [Party]
    flight: Flight
  where
    signatory user
    observer admin, parties
    key (user, getFlightContent(flight)) : Key
    maintainer key._1

    preconsuming choice Approved: () with
        approver: Party
      controller approver
      do
        assert (elem approver parties)
        assert (notElem approver approvers)
        if (length approvers + 1 + length disapprovers == length parties) then do
          create CompletedRequest with user=user, admin=admin, disapprovers=disapprovers, approvers=approver :: approvers, flight=flight, parties=parties
          return ()
        else do
          create this with user=user, admin=admin, parties=parties, disapprovers=disapprovers, approvers=approver :: approvers, flight=flight
          return ()

    preconsuming choice Disapproved: () with
        disapprover: Party
      controller disapprover
      do
        assert (elem disapprover parties)
        assert (notElem disapprover disapprovers)
        if (length disapprovers + 1 + length approvers == length parties) then do
          create CompletedRequest with user=user, admin=admin, disapprovers=disapprover :: disapprovers, approvers=approvers, flight=flight, parties=parties
          return ()
        else do
          create this with user=user, admin=admin, parties=parties, disapprovers=disapprover :: disapprovers, approvers=approvers, flight=flight
          return ()

template User with
    username: Party
    requests: [ContractId FlightRequest]
  where
    signatory username
    key username: Party
    maintainer key

    preconsuming choice CreateRequest: ContractId User with
        flight: Flight
        admin: Party
        parties: [Party]
      controller username
      do
        create FlightRequest with user=username, flight=flight, admin=admin, parties=parties, approvers=[], disapprovers=[]
        (flightId, _) <- fetchByKey @FlightRequest (username, getFlightContent(flight))
        create this with username=username, requests = flightId :: requests

template CompletedRequest with
    user: Party
    admin: Party
    parties: [Party]
    approvers: [Party]
    disapprovers: [Party]
    flight: Flight
  where
    signatory user
    observer admin, parties
    key (user, getFlightContent(flight)) : Key
    maintainer key._1
